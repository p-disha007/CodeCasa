import numpy as np # numpy lib is used to create numpy arrays.
import pandas as pd # used to create pandas dataframe. (dataframes mean structured table)
import pandas as pd # It is not easy to analyse and process the data from the csv file, so we use pandas dataframe.
import difflib # If the user makes a mistake while entering the movie name, we can use this library to correct it.


from sklearn.feature_extraction.text import TfidfVectorizer # used to convert textual data to numverical data or feature vectors.
from sklearn.metrics.pairwise import cosine_similarity

# Loading the data from the csv file to a pandas dataframe
movies_data = pd.read_csv('/content/movies.csv', delimiter=',')

# Printing the first 5 rows of the dataframe.
movies_data.head() #head function will print the first 5 rows of the dataframe.

 # Find the no of rows and columns in the dataframe
movies_data.shape # Will tell you the total no of rows and columns

 # 4803 is the total no of rows, 24 is the total no of columns
 # Selecting the relevant features for recommendation
selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

# Not all columns have data so we need to replace the NULL columns with NULL strings
# Replacing the NULL values with NULL string

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

  "# Combining all the 6 selected features\n",
  "combined_features = movies_data['genres']+ ' '+movies_data['keywords']+ ' '+movies_data['tagline']+ ' '+movies_data['cast']+ ' '+movies_data['director']"
  print(combined_features)
  vectorizer = TfidfVectorizer()
  feature_vectors = vectorizer.fit_transform(combined_features)
  print(feature_vectors)
        # getting the similarity score using cosine similarity
similarity = cosine_similarity(feature_vectors)
print(similarity)
print(similarity.shape)
movie_name = input("Enter your Favorite movie:")

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you:\n')
i=1
movie=0
for movie in sorted_similar_movies:
  index=movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<=20):
    print(i,'.',title_from_index)
    i+=1
